//
// Generated by JTB 1.3.2 DIT@UoA patched
//

package syntaxtree;

/**
 * Grammar production:
 * <PRE>
 * label -> Label()
 * nodeToken -> "["
 * integerLiteral -> IntegerLiteral()
 * nodeToken1 -> "]"
 * nodeToken2 -> "["
 * integerLiteral1 -> IntegerLiteral()
 * nodeToken3 -> "]"
 * nodeToken4 -> "["
 * integerLiteral2 -> IntegerLiteral()
 * nodeToken5 -> "]"
 * stmtList -> StmtList()
 * nodeToken6 -> "END"
 * </PRE>
 */
public class Procedure implements Node {
   private Node parent;
   public Label label;
   public NodeToken nodeToken;
   public IntegerLiteral integerLiteral;
   public NodeToken nodeToken1;
   public NodeToken nodeToken2;
   public IntegerLiteral integerLiteral1;
   public NodeToken nodeToken3;
   public NodeToken nodeToken4;
   public IntegerLiteral integerLiteral2;
   public NodeToken nodeToken5;
   public StmtList stmtList;
   public NodeToken nodeToken6;

   public Procedure(Label n0, NodeToken n1, IntegerLiteral n2, NodeToken n3, NodeToken n4, IntegerLiteral n5, NodeToken n6, NodeToken n7, IntegerLiteral n8, NodeToken n9, StmtList n10, NodeToken n11) {
      label = n0;
      if ( label != null ) label.setParent(this);
      nodeToken = n1;
      if ( nodeToken != null ) nodeToken.setParent(this);
      integerLiteral = n2;
      if ( integerLiteral != null ) integerLiteral.setParent(this);
      nodeToken1 = n3;
      if ( nodeToken1 != null ) nodeToken1.setParent(this);
      nodeToken2 = n4;
      if ( nodeToken2 != null ) nodeToken2.setParent(this);
      integerLiteral1 = n5;
      if ( integerLiteral1 != null ) integerLiteral1.setParent(this);
      nodeToken3 = n6;
      if ( nodeToken3 != null ) nodeToken3.setParent(this);
      nodeToken4 = n7;
      if ( nodeToken4 != null ) nodeToken4.setParent(this);
      integerLiteral2 = n8;
      if ( integerLiteral2 != null ) integerLiteral2.setParent(this);
      nodeToken5 = n9;
      if ( nodeToken5 != null ) nodeToken5.setParent(this);
      stmtList = n10;
      if ( stmtList != null ) stmtList.setParent(this);
      nodeToken6 = n11;
      if ( nodeToken6 != null ) nodeToken6.setParent(this);
   }

   public Procedure(Label n0, IntegerLiteral n1, IntegerLiteral n2, IntegerLiteral n3, StmtList n4) {
      label = n0;
      if ( label != null ) label.setParent(this);
      nodeToken = new NodeToken("[");
      if ( nodeToken != null ) nodeToken.setParent(this);
      integerLiteral = n1;
      if ( integerLiteral != null ) integerLiteral.setParent(this);
      nodeToken1 = new NodeToken("]");
      if ( nodeToken1 != null ) nodeToken1.setParent(this);
      nodeToken2 = new NodeToken("[");
      if ( nodeToken2 != null ) nodeToken2.setParent(this);
      integerLiteral1 = n2;
      if ( integerLiteral1 != null ) integerLiteral1.setParent(this);
      nodeToken3 = new NodeToken("]");
      if ( nodeToken3 != null ) nodeToken3.setParent(this);
      nodeToken4 = new NodeToken("[");
      if ( nodeToken4 != null ) nodeToken4.setParent(this);
      integerLiteral2 = n3;
      if ( integerLiteral2 != null ) integerLiteral2.setParent(this);
      nodeToken5 = new NodeToken("]");
      if ( nodeToken5 != null ) nodeToken5.setParent(this);
      stmtList = n4;
      if ( stmtList != null ) stmtList.setParent(this);
      nodeToken6 = new NodeToken("END");
      if ( nodeToken6 != null ) nodeToken6.setParent(this);
   }

   public void accept(visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
   public void setParent(Node n) { parent = n; }
   public Node getParent()       { return parent; }
}

