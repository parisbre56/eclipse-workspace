//
// Generated by JTB 1.3.2 DIT@UoA patched
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * All GJ visitors with no argument must implement this interface.
 */

public interface GJNoArguVisitor<R> {

   //
   // GJ Auto class visitors with no argument
   //

   public R visit(NodeList n) ;
   public R visit(NodeListOptional n) ;
   public R visit(NodeOptional n) ;
   public R visit(NodeSequence n) ;
   public R visit(NodeToken n) ;

   //
   // User-generated visitor methods below
   //

   /**
    * <PRE>
    * nodeToken -> "MAIN"
    * nodeToken1 -> "["
    * integerLiteral -> IntegerLiteral()
    * nodeToken2 -> "]"
    * nodeToken3 -> "["
    * integerLiteral1 -> IntegerLiteral()
    * nodeToken4 -> "]"
    * nodeToken5 -> "["
    * integerLiteral2 -> IntegerLiteral()
    * nodeToken6 -> "]"
    * stmtList -> StmtList()
    * nodeToken7 -> "END"
    * nodeListOptional -> ( Procedure() )*
    * nodeToken8 -> &lt;EOF&gt;
    * </PRE>
    */
   public R visit(Goal n);

   /**
    * <PRE>
    * nodeListOptional -> ( ( Label() )? Stmt() )*
    * </PRE>
    */
   public R visit(StmtList n);

   /**
    * <PRE>
    * label -> Label()
    * nodeToken -> "["
    * integerLiteral -> IntegerLiteral()
    * nodeToken1 -> "]"
    * nodeToken2 -> "["
    * integerLiteral1 -> IntegerLiteral()
    * nodeToken3 -> "]"
    * nodeToken4 -> "["
    * integerLiteral2 -> IntegerLiteral()
    * nodeToken5 -> "]"
    * stmtList -> StmtList()
    * nodeToken6 -> "END"
    * </PRE>
    */
   public R visit(Procedure n);

   /**
    * <PRE>
    * nodeChoice -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    *       | ALoadStmt()
    *       | AStoreStmt()
    *       | PassArgStmt()
    *       | CallStmt()
    * </PRE>
    */
   public R visit(Stmt n);

   /**
    * <PRE>
    * nodeToken -> "NOOP"
    * </PRE>
    */
   public R visit(NoOpStmt n);

   /**
    * <PRE>
    * nodeToken -> "ERROR"
    * </PRE>
    */
   public R visit(ErrorStmt n);

   /**
    * <PRE>
    * nodeToken -> "CJUMP"
    * reg -> Reg()
    * label -> Label()
    * </PRE>
    */
   public R visit(CJumpStmt n);

   /**
    * <PRE>
    * nodeToken -> "JUMP"
    * label -> Label()
    * </PRE>
    */
   public R visit(JumpStmt n);

   /**
    * <PRE>
    * nodeToken -> "HSTORE"
    * reg -> Reg()
    * integerLiteral -> IntegerLiteral()
    * reg1 -> Reg()
    * </PRE>
    */
   public R visit(HStoreStmt n);

   /**
    * <PRE>
    * nodeToken -> "HLOAD"
    * reg -> Reg()
    * reg1 -> Reg()
    * integerLiteral -> IntegerLiteral()
    * </PRE>
    */
   public R visit(HLoadStmt n);

   /**
    * <PRE>
    * nodeToken -> "MOVE"
    * reg -> Reg()
    * exp -> Exp()
    * </PRE>
    */
   public R visit(MoveStmt n);

   /**
    * <PRE>
    * nodeToken -> "PRINT"
    * simpleExp -> SimpleExp()
    * </PRE>
    */
   public R visit(PrintStmt n);

   /**
    * <PRE>
    * nodeToken -> "ALOAD"
    * reg -> Reg()
    * spilledArg -> SpilledArg()
    * </PRE>
    */
   public R visit(ALoadStmt n);

   /**
    * <PRE>
    * nodeToken -> "ASTORE"
    * spilledArg -> SpilledArg()
    * reg -> Reg()
    * </PRE>
    */
   public R visit(AStoreStmt n);

   /**
    * <PRE>
    * nodeToken -> "PASSARG"
    * integerLiteral -> IntegerLiteral()
    * reg -> Reg()
    * </PRE>
    */
   public R visit(PassArgStmt n);

   /**
    * <PRE>
    * nodeToken -> "CALL"
    * simpleExp -> SimpleExp()
    * </PRE>
    */
   public R visit(CallStmt n);

   /**
    * <PRE>
    * nodeChoice -> HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    * </PRE>
    */
   public R visit(Exp n);

   /**
    * <PRE>
    * nodeToken -> "HALLOCATE"
    * simpleExp -> SimpleExp()
    * </PRE>
    */
   public R visit(HAllocate n);

   /**
    * <PRE>
    * operator -> Operator()
    * reg -> Reg()
    * simpleExp -> SimpleExp()
    * </PRE>
    */
   public R visit(BinOp n);

   /**
    * <PRE>
    * nodeChoice -> "LT"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    * </PRE>
    */
   public R visit(Operator n);

   /**
    * <PRE>
    * nodeToken -> "SPILLEDARG"
    * integerLiteral -> IntegerLiteral()
    * </PRE>
    */
   public R visit(SpilledArg n);

   /**
    * <PRE>
    * nodeChoice -> Reg()
    *       | IntegerLiteral()
    *       | Label()
    * </PRE>
    */
   public R visit(SimpleExp n);

   /**
    * <PRE>
    * nodeChoice -> "a0"
    *       | "a1"
    *       | "a2"
    *       | "a3"
    *       | "t0"
    *       | "t1"
    *       | "t2"
    *       | "t3"
    *       | "t4"
    *       | "t5"
    *       | "t6"
    *       | "t7"
    *       | "s0"
    *       | "s1"
    *       | "s2"
    *       | "s3"
    *       | "s4"
    *       | "s5"
    *       | "s6"
    *       | "s7"
    *       | "t8"
    *       | "t9"
    *       | "v0"
    *       | "v1"
    * </PRE>
    */
   public R visit(Reg n);

   /**
    * <PRE>
    * nodeToken -> &lt;INTEGER_LITERAL&gt;
    * </PRE>
    */
   public R visit(IntegerLiteral n);

   /**
    * <PRE>
    * nodeToken -> &lt;IDENTIFIER&gt;
    * </PRE>
    */
   public R visit(Label n);

}

