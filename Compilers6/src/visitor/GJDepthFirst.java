//
// Generated by JTB 1.3.2 DIT@UoA patched
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n, A argu) {
      if (n.size() == 1)
         return n.elementAt(0).accept(this,argu);
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         if (n.size() == 1)
            return n.elementAt(0).accept(this,argu);
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      if (n.size() == 1)
         return n.elementAt(0).accept(this,argu);
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * <PRE>
    * nodeToken -> "MAIN"
    * nodeToken1 -> "["
    * integerLiteral -> IntegerLiteral()
    * nodeToken2 -> "]"
    * nodeToken3 -> "["
    * integerLiteral1 -> IntegerLiteral()
    * nodeToken4 -> "]"
    * nodeToken5 -> "["
    * integerLiteral2 -> IntegerLiteral()
    * nodeToken6 -> "]"
    * stmtList -> StmtList()
    * nodeToken7 -> "END"
    * nodeListOptional -> ( Procedure() )*
    * nodeToken8 -> &lt;EOF&gt;
    * </PRE>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.integerLiteral.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.nodeToken3.accept(this, argu);
      n.integerLiteral1.accept(this, argu);
      n.nodeToken4.accept(this, argu);
      n.nodeToken5.accept(this, argu);
      n.integerLiteral2.accept(this, argu);
      n.nodeToken6.accept(this, argu);
      n.stmtList.accept(this, argu);
      n.nodeToken7.accept(this, argu);
      n.nodeListOptional.accept(this, argu);
      n.nodeToken8.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * nodeListOptional -> ( ( Label() )? Stmt() )*
    * </PRE>
    */
   public R visit(StmtList n, A argu) {
      return n.nodeListOptional.accept(this, argu);
   }

   /**
    * <PRE>
    * label -> Label()
    * nodeToken -> "["
    * integerLiteral -> IntegerLiteral()
    * nodeToken1 -> "]"
    * nodeToken2 -> "["
    * integerLiteral1 -> IntegerLiteral()
    * nodeToken3 -> "]"
    * nodeToken4 -> "["
    * integerLiteral2 -> IntegerLiteral()
    * nodeToken5 -> "]"
    * stmtList -> StmtList()
    * nodeToken6 -> "END"
    * </PRE>
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;
      n.label.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.integerLiteral.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.integerLiteral1.accept(this, argu);
      n.nodeToken3.accept(this, argu);
      n.nodeToken4.accept(this, argu);
      n.integerLiteral2.accept(this, argu);
      n.nodeToken5.accept(this, argu);
      n.stmtList.accept(this, argu);
      n.nodeToken6.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * nodeChoice -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    *       | ALoadStmt()
    *       | AStoreStmt()
    *       | PassArgStmt()
    *       | CallStmt()
    * </PRE>
    */
   public R visit(Stmt n, A argu) {
      return n.nodeChoice.accept(this, argu);
   }

   /**
    * <PRE>
    * nodeToken -> "NOOP"
    * </PRE>
    */
   public R visit(NoOpStmt n, A argu) {
      return n.nodeToken.accept(this, argu);
   }

   /**
    * <PRE>
    * nodeToken -> "ERROR"
    * </PRE>
    */
   public R visit(ErrorStmt n, A argu) {
      return n.nodeToken.accept(this, argu);
   }

   /**
    * <PRE>
    * nodeToken -> "CJUMP"
    * reg -> Reg()
    * label -> Label()
    * </PRE>
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      n.reg.accept(this, argu);
      n.label.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * nodeToken -> "JUMP"
    * label -> Label()
    * </PRE>
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      n.label.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * nodeToken -> "HSTORE"
    * reg -> Reg()
    * integerLiteral -> IntegerLiteral()
    * reg1 -> Reg()
    * </PRE>
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      n.reg.accept(this, argu);
      n.integerLiteral.accept(this, argu);
      n.reg1.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * nodeToken -> "HLOAD"
    * reg -> Reg()
    * reg1 -> Reg()
    * integerLiteral -> IntegerLiteral()
    * </PRE>
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      n.reg.accept(this, argu);
      n.reg1.accept(this, argu);
      n.integerLiteral.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * nodeToken -> "MOVE"
    * reg -> Reg()
    * exp -> Exp()
    * </PRE>
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      n.reg.accept(this, argu);
      n.exp.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * nodeToken -> "PRINT"
    * simpleExp -> SimpleExp()
    * </PRE>
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      n.simpleExp.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * nodeToken -> "ALOAD"
    * reg -> Reg()
    * spilledArg -> SpilledArg()
    * </PRE>
    */
   public R visit(ALoadStmt n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      n.reg.accept(this, argu);
      n.spilledArg.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * nodeToken -> "ASTORE"
    * spilledArg -> SpilledArg()
    * reg -> Reg()
    * </PRE>
    */
   public R visit(AStoreStmt n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      n.spilledArg.accept(this, argu);
      n.reg.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * nodeToken -> "PASSARG"
    * integerLiteral -> IntegerLiteral()
    * reg -> Reg()
    * </PRE>
    */
   public R visit(PassArgStmt n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      n.integerLiteral.accept(this, argu);
      n.reg.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * nodeToken -> "CALL"
    * simpleExp -> SimpleExp()
    * </PRE>
    */
   public R visit(CallStmt n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      n.simpleExp.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * nodeChoice -> HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    * </PRE>
    */
   public R visit(Exp n, A argu) {
      return n.nodeChoice.accept(this, argu);
   }

   /**
    * <PRE>
    * nodeToken -> "HALLOCATE"
    * simpleExp -> SimpleExp()
    * </PRE>
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      n.simpleExp.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * operator -> Operator()
    * reg -> Reg()
    * simpleExp -> SimpleExp()
    * </PRE>
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      n.operator.accept(this, argu);
      n.reg.accept(this, argu);
      n.simpleExp.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * nodeChoice -> "LT"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    * </PRE>
    */
   public R visit(Operator n, A argu) {
      return n.nodeChoice.accept(this, argu);
   }

   /**
    * <PRE>
    * nodeToken -> "SPILLEDARG"
    * integerLiteral -> IntegerLiteral()
    * </PRE>
    */
   public R visit(SpilledArg n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      n.integerLiteral.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * nodeChoice -> Reg()
    *       | IntegerLiteral()
    *       | Label()
    * </PRE>
    */
   public R visit(SimpleExp n, A argu) {
      return n.nodeChoice.accept(this, argu);
   }

   /**
    * <PRE>
    * nodeChoice -> "a0"
    *       | "a1"
    *       | "a2"
    *       | "a3"
    *       | "t0"
    *       | "t1"
    *       | "t2"
    *       | "t3"
    *       | "t4"
    *       | "t5"
    *       | "t6"
    *       | "t7"
    *       | "s0"
    *       | "s1"
    *       | "s2"
    *       | "s3"
    *       | "s4"
    *       | "s5"
    *       | "s6"
    *       | "s7"
    *       | "t8"
    *       | "t9"
    *       | "v0"
    *       | "v1"
    * </PRE>
    */
   public R visit(Reg n, A argu) {
      return n.nodeChoice.accept(this, argu);
   }

   /**
    * <PRE>
    * nodeToken -> &lt;INTEGER_LITERAL&gt;
    * </PRE>
    */
   public R visit(IntegerLiteral n, A argu) {
      return n.nodeToken.accept(this, argu);
   }

   /**
    * <PRE>
    * nodeToken -> &lt;IDENTIFIER&gt;
    * </PRE>
    */
   public R visit(Label n, A argu) {
      return n.nodeToken.accept(this, argu);
   }

}
