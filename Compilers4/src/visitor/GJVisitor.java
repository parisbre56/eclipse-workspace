//
// Generated by JTB 1.3.2 DIT@UoA patched
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * All GJ visitors must implement this interface.
 */

public interface GJVisitor<R,A> {

   //
   // GJ Auto class visitors
   //

   public R visit(NodeList n, A argu);
   public R visit(NodeListOptional n, A argu);
   public R visit(NodeOptional n, A argu);
   public R visit(NodeSequence n, A argu);
   public R visit(NodeToken n, A argu);

   //
   // User-generated visitor methods below
   //

   /**
    * <PRE>
    * nodeToken -> "MAIN"
    * stmtList -> StmtList()
    * nodeToken1 -> "END"
    * nodeListOptional -> ( Procedure() )*
    * nodeToken2 -> &lt;EOF&gt;
    * </PRE>
    */
   public R visit(Goal n, A argu);

   /**
    * <PRE>
    * nodeListOptional -> ( ( Label() )? Stmt() )*
    * </PRE>
    */
   public R visit(StmtList n, A argu);

   /**
    * <PRE>
    * label -> Label()
    * nodeToken -> "["
    * integerLiteral -> IntegerLiteral()
    * nodeToken1 -> "]"
    * stmtExp -> StmtExp()
    * </PRE>
    */
   public R visit(Procedure n, A argu);

   /**
    * <PRE>
    * nodeChoice -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    * </PRE>
    */
   public R visit(Stmt n, A argu);

   /**
    * <PRE>
    * nodeToken -> "NOOP"
    * </PRE>
    */
   public R visit(NoOpStmt n, A argu);

   /**
    * <PRE>
    * nodeToken -> "ERROR"
    * </PRE>
    */
   public R visit(ErrorStmt n, A argu);

   /**
    * <PRE>
    * nodeToken -> "CJUMP"
    * exp -> Exp()
    * label -> Label()
    * </PRE>
    */
   public R visit(CJumpStmt n, A argu);

   /**
    * <PRE>
    * nodeToken -> "JUMP"
    * label -> Label()
    * </PRE>
    */
   public R visit(JumpStmt n, A argu);

   /**
    * <PRE>
    * nodeToken -> "HSTORE"
    * exp -> Exp()
    * integerLiteral -> IntegerLiteral()
    * exp1 -> Exp()
    * </PRE>
    */
   public R visit(HStoreStmt n, A argu);

   /**
    * <PRE>
    * nodeToken -> "HLOAD"
    * temp -> Temp()
    * exp -> Exp()
    * integerLiteral -> IntegerLiteral()
    * </PRE>
    */
   public R visit(HLoadStmt n, A argu);

   /**
    * <PRE>
    * nodeToken -> "MOVE"
    * temp -> Temp()
    * exp -> Exp()
    * </PRE>
    */
   public R visit(MoveStmt n, A argu);

   /**
    * <PRE>
    * nodeToken -> "PRINT"
    * exp -> Exp()
    * </PRE>
    */
   public R visit(PrintStmt n, A argu);

   /**
    * <PRE>
    * nodeChoice -> StmtExp()
    *       | Call()
    *       | HAllocate()
    *       | BinOp()
    *       | Temp()
    *       | IntegerLiteral()
    *       | Label()
    * </PRE>
    */
   public R visit(Exp n, A argu);

   /**
    * <PRE>
    * nodeToken -> "BEGIN"
    * stmtList -> StmtList()
    * nodeToken1 -> "RETURN"
    * exp -> Exp()
    * nodeToken2 -> "END"
    * </PRE>
    */
   public R visit(StmtExp n, A argu);

   /**
    * <PRE>
    * nodeToken -> "CALL"
    * exp -> Exp()
    * nodeToken1 -> "("
    * nodeListOptional -> ( Exp() )*
    * nodeToken2 -> ")"
    * </PRE>
    */
   public R visit(Call n, A argu);

   /**
    * <PRE>
    * nodeToken -> "HALLOCATE"
    * exp -> Exp()
    * </PRE>
    */
   public R visit(HAllocate n, A argu);

   /**
    * <PRE>
    * operator -> Operator()
    * exp -> Exp()
    * exp1 -> Exp()
    * </PRE>
    */
   public R visit(BinOp n, A argu);

   /**
    * <PRE>
    * nodeChoice -> "LT"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    * </PRE>
    */
   public R visit(Operator n, A argu);

   /**
    * <PRE>
    * nodeToken -> "TEMP"
    * integerLiteral -> IntegerLiteral()
    * </PRE>
    */
   public R visit(Temp n, A argu);

   /**
    * <PRE>
    * nodeToken -> &lt;INTEGER_LITERAL&gt;
    * </PRE>
    */
   public R visit(IntegerLiteral n, A argu);

   /**
    * <PRE>
    * nodeToken -> &lt;IDENTIFIER&gt;
    * </PRE>
    */
   public R visit(Label n, A argu);

}
