//
// Generated by JTB 1.3.2 DIT@UoA patched
//

package syntaxtree;

import visitor.VisitorException;

/**
 * Grammar production:
 * <PRE>
 * label -> Label()
 * nodeToken -> "["
 * integerLiteral -> IntegerLiteral()
 * nodeToken1 -> "]"
 * stmtExp -> StmtExp()
 * </PRE>
 */
public class Procedure implements Node {
   /**
	 * 
	 */
	private static final long serialVersionUID = 4712036121921312451L;
private Node parent;
   public Label label;
   public NodeToken nodeToken;
   public IntegerLiteral integerLiteral;
   public NodeToken nodeToken1;
   public StmtExp stmtExp;

   public Procedure(Label n0, NodeToken n1, IntegerLiteral n2, NodeToken n3, StmtExp n4) {
      label = n0;
      if ( label != null ) label.setParent(this);
      nodeToken = n1;
      if ( nodeToken != null ) nodeToken.setParent(this);
      integerLiteral = n2;
      if ( integerLiteral != null ) integerLiteral.setParent(this);
      nodeToken1 = n3;
      if ( nodeToken1 != null ) nodeToken1.setParent(this);
      stmtExp = n4;
      if ( stmtExp != null ) stmtExp.setParent(this);
   }

   public Procedure(Label n0, IntegerLiteral n1, StmtExp n2) {
      label = n0;
      if ( label != null ) label.setParent(this);
      nodeToken = new NodeToken("[");
      if ( nodeToken != null ) nodeToken.setParent(this);
      integerLiteral = n1;
      if ( integerLiteral != null ) integerLiteral.setParent(this);
      nodeToken1 = new NodeToken("]");
      if ( nodeToken1 != null ) nodeToken1.setParent(this);
      stmtExp = n2;
      if ( stmtExp != null ) stmtExp.setParent(this);
   }

   public void accept(visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(visitor.GJVisitor<R,A> v, A argu) throws VisitorException {
      return v.visit(this,argu);
   }
   public <R> R accept(visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
   public void setParent(Node n) { parent = n; }
   public Node getParent()       { return parent; }
}

