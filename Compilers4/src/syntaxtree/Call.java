//
// Generated by JTB 1.3.2 DIT@UoA patched
//

package syntaxtree;

import visitor.VisitorException;

/**
 * Grammar production:
 * <PRE>
 * nodeToken -> "CALL"
 * exp -> Exp()
 * nodeToken1 -> "("
 * nodeListOptional -> ( Exp() )*
 * nodeToken2 -> ")"
 * </PRE>
 */
public class Call implements Node {
   /**
	 * 
	 */
	private static final long serialVersionUID = 570853339410484615L;
private Node parent;
   public NodeToken nodeToken;
   public Exp exp;
   public NodeToken nodeToken1;
   public NodeListOptional nodeListOptional;
   public NodeToken nodeToken2;

   public Call(NodeToken n0, Exp n1, NodeToken n2, NodeListOptional n3, NodeToken n4) {
      nodeToken = n0;
      if ( nodeToken != null ) nodeToken.setParent(this);
      exp = n1;
      if ( exp != null ) exp.setParent(this);
      nodeToken1 = n2;
      if ( nodeToken1 != null ) nodeToken1.setParent(this);
      nodeListOptional = n3;
      if ( nodeListOptional != null ) nodeListOptional.setParent(this);
      nodeToken2 = n4;
      if ( nodeToken2 != null ) nodeToken2.setParent(this);
   }

   public Call(Exp n0, NodeListOptional n1) {
      nodeToken = new NodeToken("CALL");
      if ( nodeToken != null ) nodeToken.setParent(this);
      exp = n0;
      if ( exp != null ) exp.setParent(this);
      nodeToken1 = new NodeToken("(");
      if ( nodeToken1 != null ) nodeToken1.setParent(this);
      nodeListOptional = n1;
      if ( nodeListOptional != null ) nodeListOptional.setParent(this);
      nodeToken2 = new NodeToken(")");
      if ( nodeToken2 != null ) nodeToken2.setParent(this);
   }

   public void accept(visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(visitor.GJVisitor<R,A> v, A argu) throws VisitorException {
      return v.visit(this,argu);
   }
   public <R> R accept(visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
   public void setParent(Node n) { parent = n; }
   public Node getParent()       { return parent; }
}

