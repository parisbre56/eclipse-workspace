//
// Generated by JTB 1.3.2 DIT@UoA patched
//

package syntaxtree;

import visitor.VisitorException;

/**
 * Grammar production:
 * <PRE>
 * nodeToken -> "BEGIN"
 * stmtList -> StmtList()
 * nodeToken1 -> "RETURN"
 * exp -> Exp()
 * nodeToken2 -> "END"
 * </PRE>
 */
public class StmtExp implements Node {
   /**
	 * 
	 */
	private static final long serialVersionUID = -6478601540019331087L;
private Node parent;
   public NodeToken nodeToken;
   public StmtList stmtList;
   public NodeToken nodeToken1;
   public Exp exp;
   public NodeToken nodeToken2;

   public StmtExp(NodeToken n0, StmtList n1, NodeToken n2, Exp n3, NodeToken n4) {
      nodeToken = n0;
      if ( nodeToken != null ) nodeToken.setParent(this);
      stmtList = n1;
      if ( stmtList != null ) stmtList.setParent(this);
      nodeToken1 = n2;
      if ( nodeToken1 != null ) nodeToken1.setParent(this);
      exp = n3;
      if ( exp != null ) exp.setParent(this);
      nodeToken2 = n4;
      if ( nodeToken2 != null ) nodeToken2.setParent(this);
   }

   public StmtExp(StmtList n0, Exp n1) {
      nodeToken = new NodeToken("BEGIN");
      if ( nodeToken != null ) nodeToken.setParent(this);
      stmtList = n0;
      if ( stmtList != null ) stmtList.setParent(this);
      nodeToken1 = new NodeToken("RETURN");
      if ( nodeToken1 != null ) nodeToken1.setParent(this);
      exp = n1;
      if ( exp != null ) exp.setParent(this);
      nodeToken2 = new NodeToken("END");
      if ( nodeToken2 != null ) nodeToken2.setParent(this);
   }

   public void accept(visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(visitor.GJVisitor<R,A> v, A argu) throws VisitorException {
      return v.visit(this,argu);
   }
   public <R> R accept(visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
   public void setParent(Node n) { parent = n; }
   public Node getParent()       { return parent; }
}

