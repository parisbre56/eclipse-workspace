//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;

/**
 * All GJ visitors must implement this interface.
 */

public interface GJVisitor<R,A> {

   //
   // GJ Auto class visitors
   //

   public R visit(NodeList n, A argu) throws VisitorException;
   public R visit(NodeListOptional n, A argu) throws VisitorException;
   public R visit(NodeOptional n, A argu) throws VisitorException;
   public R visit(NodeSequence n, A argu) throws VisitorException;
   public R visit(NodeToken n, A argu);

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
 * @throws VisitorException 
    */
   public R visit(Goal n, A argu) throws VisitorException;

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> ( VarDeclaration() )*
    * f15 -> ( Statement() )*
    * f16 -> "}"
    * f17 -> "}"
 * @throws VisitorException 
    */
   public R visit(MainClass n, A argu) throws VisitorException;

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
 * @throws VisitorException 
    */
   public R visit(TypeDeclaration n, A argu) throws VisitorException;

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
 * @throws VisitorException 
    */
   public R visit(ClassDeclaration n, A argu) throws VisitorException;

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
 * @throws VisitorException 
    */
   public R visit(ClassExtendsDeclaration n, A argu) throws VisitorException;

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
 * @throws VisitorException 
    */
   public R visit(VarDeclaration n, A argu) throws VisitorException;

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
 * @throws VisitorException 
    */
   public R visit(MethodDeclaration n, A argu) throws VisitorException;

   /**
    * f0 -> FormalParameter()
    * f1 -> FormalParameterTail()
 * @throws VisitorException 
    */
   public R visit(FormalParameterList n, A argu) throws VisitorException;

   /**
    * f0 -> Type()
    * f1 -> Identifier()
 * @throws VisitorException 
    */
   public R visit(FormalParameter n, A argu) throws VisitorException;

   /**
    * f0 -> ( FormalParameterTerm() )
 * @throws VisitorException *
    */
   public R visit(FormalParameterTail n, A argu) throws VisitorException;

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
 * @throws VisitorException 
    */
   public R visit(FormalParameterTerm n, A argu) throws VisitorException;

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
 * @throws VisitorException 
    */
   public R visit(Type n, A argu) throws VisitorException;

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu);

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu);

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu);

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
 * @throws VisitorException 
    */
   public R visit(Statement n, A argu) throws VisitorException;

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
 * @throws VisitorException 
    */
   public R visit(Block n, A argu) throws VisitorException;

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
 * @throws VisitorException 
    */
   public R visit(AssignmentStatement n, A argu) throws VisitorException;

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
 * @throws VisitorException 
    */
   public R visit(ArrayAssignmentStatement n, A argu) throws VisitorException;

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
 * @throws VisitorException 
    */
   public R visit(IfStatement n, A argu) throws VisitorException;

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
 * @throws VisitorException 
    */
   public R visit(WhileStatement n, A argu) throws VisitorException;

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
 * @throws VisitorException 
    */
   public R visit(PrintStatement n, A argu) throws VisitorException;

   /**
    * f0 -> AndExpression()
    *       | CompareExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | Clause()
 * @throws VisitorException 
    */
   public R visit(Expression n, A argu) throws VisitorException;

   /**
    * f0 -> Clause()
    * f1 -> "&&"
    * f2 -> Clause()
 * @throws VisitorException 
    */
   public R visit(AndExpression n, A argu) throws VisitorException;

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<"
    * f2 -> PrimaryExpression()
 * @throws VisitorException 
    */
   public R visit(CompareExpression n, A argu) throws VisitorException;

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
 * @throws VisitorException 
    */
   public R visit(PlusExpression n, A argu) throws VisitorException;

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
 * @throws VisitorException 
    */
   public R visit(MinusExpression n, A argu) throws VisitorException;

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
 * @throws VisitorException 
    */
   public R visit(TimesExpression n, A argu) throws VisitorException;

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
 * @throws VisitorException 
    */
   public R visit(ArrayLookup n, A argu) throws VisitorException;

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
 * @throws VisitorException 
    */
   public R visit(ArrayLength n, A argu) throws VisitorException;

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
 * @throws VisitorException 
    */
   public R visit(MessageSend n, A argu) throws VisitorException;

   /**
    * f0 -> Expression()
    * f1 -> ExpressionTail()
 * @throws VisitorException 
    */
   public R visit(ExpressionList n, A argu) throws VisitorException;

   /**
    * f0 -> ( ExpressionTerm() )
 * @throws VisitorException *
    */
   public R visit(ExpressionTail n, A argu) throws VisitorException;

   /**
    * f0 -> ","
    * f1 -> Expression()
 * @throws VisitorException 
    */
   public R visit(ExpressionTerm n, A argu) throws VisitorException;

   /**
    * f0 -> NotExpression()
    *       | PrimaryExpression()
 * @throws VisitorException 
    */
   public R visit(Clause n, A argu) throws VisitorException;

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | BracketExpression()
 * @throws VisitorException 
    */
   public R visit(PrimaryExpression n, A argu) throws VisitorException;

   /**
    * f0 -> <INTEGER_LITERAL>
 * @throws VisitorException 
    */
   public R visit(IntegerLiteral n, A argu) throws VisitorException;

   /**
    * f0 -> "true"
 * @throws VisitorException 
    */
   public R visit(TrueLiteral n, A argu) throws VisitorException;

   /**
    * f0 -> "false"
 * @throws VisitorException 
    */
   public R visit(FalseLiteral n, A argu) throws VisitorException;

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) throws VisitorException;

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) throws VisitorException;

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
 * @throws VisitorException 
    */
   public R visit(ArrayAllocationExpression n, A argu) throws VisitorException;

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) throws VisitorException;

   /**
    * f0 -> "!"
    * f1 -> Clause()
 * @throws VisitorException 
    */
   public R visit(NotExpression n, A argu) throws VisitorException;

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
 * @throws VisitorException 
    */
   public R visit(BracketExpression n, A argu) throws VisitorException;

}
